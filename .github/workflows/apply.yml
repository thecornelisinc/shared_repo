# name: Terraform Apply for Main

# on:
#   workflow_call:
#     inputs:
#       account:
#         description: 'The AWS account to deploy to (e.g., prod, sec)'
#         required: true
#         type: string
        
#       aws_region:
#         required: true
#         type: string
#         description: 'AWS Region'
        
#       aws_role_to_assume:
#         required: true
#         type: string
#         description: 'IAM Role ARN to assume via OIDC'
#     secrets:
#       snyk_token:
#         description: 'Snyk API token for authentication'
#         required: true
# jobs:
#   Synk-IaC-Check:
#     permissions:
#       contents: read
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout
#         uses: actions/checkout@v4

#       - name: Run Snyk to check configuration files for security issues
#         continue-on-error: true
#         uses: snyk/actions/iac@master
#         env:
#           SNYK_TOKEN: ${{ secrets.snyk_token}}
#         with: 
#           args: 
#             --severity-threshold=high
#             --report
#             --sarif-file-output=terraform.synk.scan
#           sarif: false

#   terraform-apply:
#     name: Terraform Apply for ${{ inputs.account }}
#     runs-on: ubuntu-latest
#     needs: Synk-IaC-Check

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Configure AWS credentials using OIDC
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: ${{ inputs.aws_role_to_assume }}
#           aws-region: ${{ inputs.aws_region }}

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.1.7

#       - name: Terraform Init
#         run: terraform init

#       - name: Plan Terraform
#         id: plan
#         run: terraform plan -var-file=${{ inputs.account }}.tfvars
      
#       - name: Terraform Plan Status
#         if: steps.plan.outcome == 'failure'
#         run: exit 1

#       - name: Apply Terraform
#         run: terraform apply -auto-approve -var-file=${{ inputs.account }}.tfvars
#       - name: Destroy Terraform
#         run: terraform destroy -auto-approve -var-file=${{ inputs.account }}.tfvars

#       - name: Post-Deployment Notifications
#         run: echo "Deployment to ${{ inputs.account }} environment completed."

name: Terraform Apply for Main

on:
  workflow_call:
    inputs:
      account:
        description: 'The AWS account to deploy to (e.g., prod, sec)'
        required: true
        type: string
        
      aws_region:
        required: true
        type: string
        description: 'AWS Region'
        
      aws_role_to_assume:
        required: true
        type: string
        description: 'IAM Role ARN to assume via OIDC'
    secrets:
      SNYK_TOKEN:
        description: 'Snyk API token for authentication'
        required: true

jobs:
  Synk-IaC-Check:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.aws_role_to_assume }}
          aws-region: ${{ inputs.aws_region }}

      - name: Run Snyk to check configuration files for security issues
        continue-on-error: true
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.snyk_token}}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform Init
        run: terraform init

      - name: Generate Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -var-file=${{ inputs.account }}.tfvars

      - name: Convert Terraform Plan to JSON
        run: terraform show -json tfplan > tfplan.json

      - name: Run Snyk IaC Scan on Terraform Plan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk iac test tfplan.json --severity-threshold=high --report --sarif-file-output=terraform.snyk.scan

  terraform-apply:
    name: Terraform Apply for ${{ inputs.account }}
    runs-on: ubuntu-latest
    needs: Synk-IaC-Check

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.aws_role_to_assume }}
          aws-region: ${{ inputs.aws_region }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Terraform Init
        run: terraform init

      - name: Apply Terraform
        run: terraform apply -auto-approve -var-file=${{ inputs.account }}.tfvars

      - name: Destroy Terraform
        run: terraform destroy -auto-approve -var-file=${{ inputs.account }}.tfvars

      - name: Post-Deployment Notifications
        run: echo "Deployment to ${{ inputs.account }} environment completed."
